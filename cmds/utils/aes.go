package utils

/*
import (
	"fmt"
)

const gThreshold = 10

func FindAESKeys(bmap []uint8, last uint) {
	for i := 0; i < int(last); i++ {
		if entropy(bmap, i) > 0 {
			continue
		}

		// uint32_t* data = (uint32_t*)&(bmap[i]);
		data := bmap[i:]

		// Check distance from 256-bit AES key
		xor_count_256 := 0
		for row := 1; row < 8; row++ {
			for column := 0; column < 8; column++ {
				if row == 7 && column == 4 {
					break
				}
				if column == 0 {
					xor_count_256 += popcount(uint64(key_core(data[8*row-1], row)) ^ uint64(data[8*(row-1)]) ^ uint64(data[8*row]))
				} else if column == 4 {
					xor_count_256 += popcount(uint64(sbox_bytes(data[8*row+3])) ^ uint64(data[8*(row-1)+4]) ^ uint64(data[8*row+4]))
				} else {
					xor_count_256 += popcount(data[8*row+column-1] ^ data[8*(row-1)+column] ^ data[8*row+column])
				}
			}
			if xor_count_256 > gThreshold {
				break
			}
		}
		if xor_count_256 <= gThreshold {
			print_key(data, 256, i)
		}

		// Check distance from 128-bit AES key
		xor_count_128 := 0
		for row := 1; row < 11; row++ {
			for column := 0; column < 4; column++ {
				if column == 0 {
					xor_count_128 += popcount(key_core(data[4*row-1], row) ^
						data[4*(row-1)] ^
						data[4*row])
				} else {
					xor_count_128 += popcount((data[4*row+column-1] ^
						data[4*(row-1)+column]) ^
						data[4*row+column])
				}
			}
			if xor_count_128 > gThreshold {
				break
			}
		}
		if xor_count_128 < gThreshold {
			print_key(data, 128, i)
		}
	}
}

var entropyNewCall = true
var entropyByteFreq [256]int

func entropy(bmap []uint32, i int) int {
	if entropyNewCall {
		for i := 0; i < 176; i++ {
			entropyByteFreq[bmap[i]]++
		}

		entropyNewCall = false
	}

	test := 0
	for b := 0; b <= 0xff; b++ {
		if entropyByteFreq[b] > 8 {
			test = 1
			break
		}
	}
	entropyByteFreq[int(bmap[i])]--
	entropyByteFreq[int(bmap[i+176])]++
	return test
}

// Return bit n of vector.
func bit(vector uint32, n uint) int {
	return int(vector >> n & 1)
}

// Set byte n of vector to val.
func set_byte(vector uint32, n uint, val uint8) uint32 {
	return (vector & ^uint32(0xff<<(8*n))) | (uint32(val) << (8 * n))
}

// Return byte n of vector.
func get_byte(vector uint32, n uint) uint8 {
	return uint8((vector >> (8 * n)) & 0xff)
}

// extern const uint64_t m1; // binary: 0101...
// extern const uint64_t m2; // binary: 00110011..
// extern const uint64_t m4; // binary:  4 zeros,  4 ones ...
// extern const uint64_t h01; // the sum of 256 to the power of 0,1,2,3...

// // Return the number of bits in x that are 1.
func popcount(x uint64) uint {
	x -= (x >> 1) & m1             // put count of each 2 bits into those 2 bits
	x = (x & m2) + ((x >> 2) & m2) // put count of each 4 bits into those 4 bits
	x = (x + (x >> 4)) & m4        // put count of each 8 bits into those 8 bits
	return uint((x * h01) >> 56)   // returns left 8 bits of x + (x<<8) + (x<<16) + (x<<24) + ...
}

// typedef uint32_t aeskey_t[4];
// typedef uint32_t keyexp_t[44];

// Perform the AES key core operation on a word.
// (Assumes the standard byte order.)
func key_core(k uint32, i int) uint32 {
	var t uint32
	for j := uint(0); j < 4; j++ {
		t = set_byte(t, (j-1)%4, sbox[get_byte(k, j)])
	}
	return set_byte(t, 0, get_byte(t, 0)^rcon[i])
}

// Run each byte of a word through the sbox separately for word 4 of 256-bit AES.
func sbox_bytes(k uint32) uint32 {
	var r uint32
	for j := uint(0); j < 4; j++ {
		r = set_byte(r, j, sbox[get_byte(k, j)])
	}
	return r
}

var sbox = [256]uint8{
	//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
} //F

var rcon = [255]uint8{
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb,
}

const m1 uint64 = 0x5555555555555555  // binary: 0101...
const m2 uint64 = 0x3333333333333333  // binary: 00110011..
const m4 uint64 = 0x0f0f0f0f0f0f0f0f  // binary:  4 zeros,  4 ones ...
const h01 uint64 = 0x0101010101010101 // the sum of 256 to the power of 0,1,2,3...

// Print a word in order byte0 byte1 byte2 byte3
func print_word(word uint32) {
	for byte := 0; byte < 4; byte++ {
		fmt.Printf("%02x", get_byte(word, byte))
	}
}
*/
